class Module = Regex.createClass(
      <Seq>
        <OneOf>
          <ModuleDoc name="doc" />
          <Seq>
            <Warning category="documentation" text="Module documentation is missing." />
            <Space />
          </Seq>
        </OneOf>
        <Repeat>
          <Seq>
            <OneOf>
              <(Comment|Import|Declaration) name="contents">
              /* Note: support this:
               * <Field name="contents" node=(Import|Declaration)> // Does not match comments
               */
            </OneOf>
            <Space s="" />
            <Text str=";" />
            <Space s="\n" />
          </Seq>
          <Space s="\n" />
        </Repeat>
      </Seq>
    );

class ModuleDoc = Regex.createClass(
      <OneOf>
        <Warning id="EMD">
          <Text str="/*" />
          <Repeat>
            <Space />
            <Text str="*" />
          </Repeat>
          <Text str="*/" />
        </Warning>
        <Seq>
          <Text str="/">
          <OneOf>
            <Warning id="MASC">
              <Text str="*" />
              <Ahead>
                <Not>
                  <Text str="*">
                </Not>
              </Ahead>
            </Warning>
            <Text str="**" />
          </OneOf>
          <Space s="\n">
          <Repeat>
            <Seq>
              <OneOf>
                <Warning id="MACS">
                  <Repeat>
                    <Not>
                      <Text str="\n" />
                      <Text str="*/" /> // TODO this must be accepted input
                    <Not>
                  </Repeat>
                </Warning>
                <Text str=" * " />
              </OneOf>
              <Text name="documentation" newLine=false />
            <Seq>
          </Repeat>
          <OneOf>
            <Warning category="style" text="Module documentation should end with \"**/\"">
              <Text str="*/" />
            </Warning>
          </OneOf>
        </Seq>
      </OneOf>
    );
    
      Expr().oneOf(
        Expr().warning("Style", Expr().string("/").repeat(Expr().string("*"), 2, 4).string("/")),
        Expr().warning(
          "Style",
          Expr().string("/*").ahead(Expr().noneOf("*")),
          Expr().string("/**"),
        )
          .warning(
            "Style",
            Expr().repeat(Expr().noneOf(
              Expr().string("\n"),
              Expr().string("*").ahead(Expr().string("/"))
            ), 1),
          )
          .maybe(Expr().string("\n"))
          .repeat(
            Expr().warning("Style", Expr().string(" * "), Expr())
            .repeat(Expr.field("text", Expr().noneOf("\n"))).string(\n),
          )
          .warning("Style", Expr().space().string("*/"), space("", true).string("**/"))
          .string("\n");
      );
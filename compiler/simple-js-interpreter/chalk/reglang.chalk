///
A parser for regular languages.
///

class Map<type Key, type Val> {
  [](Key, Val) pairs;
  
  Bool has(Key key) => pairs.some(p => p[0] == key);
  
  *Val get(Key key) => pairs.every(p => p[0] == key && return-get p[1]);
  
  Null set(Key key, Val val) =>
      pairs.some(p => p[0] == key && { p[1] = val; true }) || pairs.push((key, val));
};

export type Grammar = [](String, []String);
type State = (Bool, Map<String, State>);

Bool isTerminal(String s) => s.isUpper(0);

Bool isRegularGrammar(Grammar g) {
  return g.every(rule => {
    return !isTerminal(rule[0])
        && rule[1].length < 3
        && (rule[1].length < 1 || isTerminal(rule[1][1]))
        && (rule[1].length < 2 || !isTerminal(rule[1][2]));
  });
};

export class Parser {
  State startingState;
  Map<String, State> states;
  
  new(Grammar g) {
    isRegularGrammar(g) || {
      startingState = (false, new Map<String, State>());
      
      return;
    };
    
    g.every(rule => {
    
    });
  };
  
  Bool isAccepted(String str) {
    State state = startingState;
    
    for Int i = 0; i < str.length; i++ {
      state[1].has(str[i]) || return false;
      
      state = state[1].get(str[i]);
    };
    
    return state[0];
  };
};
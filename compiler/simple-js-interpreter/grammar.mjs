// Grammar of a reasonable superset of Chalk. (Probably.)
export const grammar =
  [ [ "Chalk", [ "MComment", "Imports", "DefExprs" ] ],
    [ "MComment", [ "Comment" ] ],
    [ "MComment", [] ],
    [ "Comment", [ "///", "string", "NextComment", "///" ] ],
    [ "NextComment", [ "{{{", "Chalk", "}}}", "string", "NextComment" ] ],
    [ "NextComment", [] ],
    [ "Imports", [ "MComment", "Import", "Imports" ] ],
    [ "Imports", [] ],
    [ "Import", [ "import", "ImportWhat", "lIdentifier", "string", ";" ] ], // from is not a keyword
    [ "ImportWhat", [ "uIdentifier" ] ],
    [ "ImportWhat", [ "Object" ] ],
    [ "DefExprs", [ "DefExpr", "DefExprs" ] ],
    [ "DefExprs", [ "Proposition", ";", "DefExprs" ] ],
    [ "DefExprs", [] ],
    [ "DefExprsTrait", [ "DefExpr", "DefExprsTrait" ] ],
    [ "DefExprsTrait", [ "FnDeclaration", ";", "DefExprsTrait" ] ],
    [ "DefExprsTrait", [] ],
    [ "DefExpr", [ "VarDef", ";" ] ],
    [ "DefExpr", [ "ArrowFnDef", ";" ] ],
    [ "DefExpr", [ "FnDef" ] ],
    [ "DefExpr", [ "ClassDef" ] ],
    [ "DefExpr", [ "TraitDef" ] ],
    [ "DefExpr", [ "EqualR", ";" ] ],
    [ "Identifier", [ "lIdentifier" ] ],
    [ "Identifier", [ "uIdentifier" ] ],
    [ "VarDef", [ "VarDefSkeleton", "=", "Expr" ] ],
    [ "VarDef", [ "VarDefSkeleton", "Tuple" ] ],
    [ "VarDef", [ "Type", "Tuple" ] ],
    [ "VarDef", [ "Access", "AtomicType", "Tuple" ] ],
    [ "VarDefSkeleton", [ "Type", "Identifier" ] ],
    [ "VarDefSkeleton", [ "Access", "Type", "Identifier" ] ],
    [ "VarDefSkeleton", [ "Access", "Identifier" ] ],
    [ "Access", [ "mut" ] ],
    [ "Access", [ "let" ] ],
    [ "Access", [ "cst" ] ],
    [ "Access", [ "imt" ] ],
    [ "ArrowFnDef", [ "MType", "Identifier", "=>", "Expr" ] ],
    [ "ArrowFnDef", [ "MType", "MlIdentifier", "(", "IdList", ")", "=>", "Expr" ] ],
    [ "ArrowFnDef", [ "MType", "MlIdentifier", "(", "Params", ")", "=>", "Expr" ] ],
    [ "FnDeclaration", [ "MType", "lIdentifier", "(", "Params", ")" ] ],
    [ "FnDef", [ "FnDeclaration", "BlockOrEmpty" ] ],
    [ "MType", [ "Type" ] ],
    [ "MType", [] ],
    [ "MlIdentifier", [ "lIdentifier" ] ],
    [ "MlIdentifier", [] ],
    [ "ClassDef", [ "class", "uIdentifier", "GenericParams", "{", "DefExprs", "}" ] ],
    [ "TraitDef", [ "trait", "uIdentifier", "GenericParams", "{", "DefExprsTrait", "}" ] ],
    [ "GenericParams", [ "<", "Params", ">" ] ],
    [ "GenericParams", [] ],
    [ "Type", [ "TypeUnion" ] ],
    [ "TypeUnion", [ "TypeIntersection", "|", "TypeUnion" ] ],
    [ "TypeUnion", [ "TypeIntersection" ] ],
    [ "TypeIntersection", [ "AtomicType", "&", "TypeIntersection" ] ],
    [ "TypeIntersection", [ "AtomicType" ] ],
    [ "AtomicType", [ "[]", "AtomicType" ] ],
    [ "AtomicType", [ "*", "AtomicType" ] ],
    [ "AtomicType", [ "class" ] ],
    [ "AtomicType", [ "trait" ] ],
    [ "AtomicType", [ "type" ] ],
    [ "AtomicType", [ "any" ] ],
    [ "AtomicType", [ "(", "Type", ")" ] ],
    [ "AtomicType", [ "MemAccessType" ] ],
    [ "MemAccessType", [ "Identifier", ".", "MemAccessType" ] ],
    [ "MemAccessType", [ "uIdentifier" ] ],
    [ "MemAccessType", [ "uIdentifier", "<", "Type", "TypeList", ">" ] ],
    [ "TypeList", [ ",", "Type" ] ],
    [ "TypeList", [] ],
    [ "IdList", [ "Identifier", "IdListNext" ] ],
    [ "IdList", [] ],
    [ "IdListNext", [ ",", "Identifier", "IdListNext" ] ],
    [ "IdListNext", [] ],
    [ "Params", [ "Type", "Identifier", "ParamsRest" ] ],
    [ "Params", [] ],
    [ "ParamsRest", [ ",", "Type", "Identifier" ] ],
    [ "ParamsRest", [ ",", "Identifier" ] ],
    [ "ParamsRest", [ "," ] ],
    [ "ParamsRest", [] ],
    [ "Expr", [ "return", "Expr" ] ],
    [ "Expr", [ "break", "Expr" ] ],
    [ "Expr", [ "comptime", "Expr" ] ],
    [ "Expr", [ "ignore", "Expr" ] ],
    [ "Expr", [ "mutab", "Expr" ] ],
    [ "Expr", [ "immut", "Expr" ] ],
    [ "Expr", [ "const", "Expr" ] ],
    [ "Expr", [ "continue" ] ],
    [ "Expr", [ "QMarkR" ] ],
    [ "QMarkR", [ "OrL", "?", "Expr", ":", "QMarkR" ] ],
    [ "QMarkR", [ "OrR" ] ],
    [ "QMarkL", [ "OrL", "?", "Expr", ":", "QMarkL" ] ],
    [ "QMarkL", [ "OrL" ] ],
    [ "OrR", [ "AndL", "||", "OrR" ] ],
    [ "OrR", [ "AndR" ] ],
    [ "OrL", [ "AndL", "||", "OrL" ] ],
    [ "OrL", [ "AndL" ] ],
    [ "AndR", [ "EqualL", "&&", "AndR" ] ],
    [ "AndR", [ "EqualR" ] ],
    [ "AndL", [ "EqualL", "&&", "AndL" ] ],
    [ "AndL", [ "EqualL" ] ],
    [ "EqualR", [ "EqualL", "==", "RelationR" ] ],
    [ "EqualR", [ "EqualL", "!=", "RelationR" ] ],
    [ "EqualR", [ "RelationR" ] ],
    [ "EqualL", [ "EqualL", "==", "RelationL" ] ],
    [ "EqualL", [ "EqualL", "!=", "RelationL" ] ],
    [ "EqualL", [ "RelationL" ] ],
    [ "RelationR", [ "CompareL", "<", "CompareR" ] ],
    [ "RelationR", [ "CompareL", ">", "CompareR" ] ],
    [ "RelationR", [ "CompareL", "<=", "CompareR" ] ],
    [ "RelationR", [ "CompareL", ">=", "CompareR" ] ],
    [ "RelationR", [ "CompareL", "is", "CompareR" ] ],
    [ "RelationR", [ "CompareR" ] ],
    [ "RelationL", [ "CompareL", "<", "CompareL" ] ],
    [ "RelationL", [ "CompareL", ">", "CompareL" ] ],
    [ "RelationL", [ "CompareL", "<=", "CompareL" ] ],
    [ "RelationL", [ "CompareL", ">=", "CompareL" ] ],
    [ "RelationL", [ "CompareL", "is", "CompareL" ] ],
    [ "RelationL", [ "CompareL" ] ],
    [ "CompareR", [ "ConcatL", "<=>", "ConcatR" ] ],
    [ "CompareR", [ "ConcatR" ] ],
    [ "CompareL", [ "ConcatL", "<=>", "ConcatL" ] ],
    [ "CompareL", [ "ConcatL" ] ],
    [ "ConcatR", [ "ConcatL", "++", "ModR" ] ],
    [ "ConcatR", [ "ModR" ] ],
    [ "ConcatL", [ "ConcatL", "++", "ModL" ] ],
    [ "ConcatL", [ "ModL" ] ],
    [ "ModR", [ "ModL", "%", "AddR" ] ],
    [ "ModR", [ "AddR" ] ],
    [ "ModL", [ "ModL", "%", "AddL" ] ],
    [ "ModL", [ "AddL" ] ],
    [ "AddR", [ "AddL", "+", "MulR" ] ],
    [ "AddR", [ "AddL", "-", "MulR" ] ],
    [ "AddR", [ "MulR" ] ],
    [ "AddL", [ "AddL", "+", "MulL" ] ],
    [ "AddL", [ "AddL", "-", "MulL" ] ],
    [ "AddL", [ "MulL" ] ],
    [ "MulR", [ "MulL", "*", "PowR" ] ],
    [ "MulR", [ "MulL", "/", "PowR" ] ],
    [ "MulR", [ "PowR" ] ],
    [ "MulL", [ "MulL", "*", "PowL" ] ],
    [ "MulL", [ "MulL", "/", "PowL" ] ],
    [ "MulL", [ "PowL" ] ],
    [ "PowR", [ "Neg", "**", "PowR" ] ],
    [ "PowR", [ "Neg" ] ],
    [ "PowR", [ "Assign" ] ],
    [ "PowL", [ "Neg", "**", "PowL" ] ],
    [ "PowL", [ "Neg" ] ],
    [ "Assign", [ "Neg", "=", "Expr" ] ],
    [ "Assign", [ "Neg", "+=", "Expr" ] ],
    [ "Assign", [ "Neg", "-=", "Expr" ] ],
    [ "Assign", [ "Neg", "*=", "Expr" ] ],
    [ "Assign", [ "Neg", "/=", "Expr" ] ],
    [ "Assign", [ "Neg", "%=", "Expr" ] ],
    [ "Assign", [ "Neg", "**=", "Expr" ] ],
    [ "Neg", [ "!", "Neg" ] ],
    [ "Neg", [ "await", "Neg" ] ],
    [ "Neg", [ "nowait", "Neg" ] ],
    [ "Neg", [ "ignore", "Neg" ] ],
    [ "Neg", [ "Unary" ] ],
    [ "Unary", [ "Unary", ".", "lIdentifier" ] ],
    [ "Unary", [ "Unary", "[", "Expr", "]" ] ],
    [ "Unary", [ "lIdentifier" ] ],
    [ "Unary", [ "Type" ] ],
    [ "Unary", [ "Literal" ] ],
    [ "Unary", [ "FunctionCall" ] ],
    [ "Unary", [ "Block" ] ],
    [ "Unary", [ "Switch" ] ],
    [ "Unary", [ "For" ] ],
    [ "Literal", [ "number" ] ],
    [ "Literal", [ "string" ] ],
    [ "Literal", [ "VarDef" ] ],
    [ "Literal", [ "ArrowFnDef" ] ],
    [ "Literal", [ "FnDef" ] ],
    [ "Literal", [ "ClassDef" ] ],
    [ "Literal", [ "TraitDef" ] ],
    [ "Literal", [ "Array" ] ],
    [ "Literal", [ "Tuple" ] ],
    [ "Literal", [ "Object" ] ],
    [ "Literal", [ "Set" ] ],
    [ "Array", [ "[", "]" ] ],
    [ "Array", [ "[", "Expr", "LitExprListNext", "]" ] ],
    [ "Array", [ "[", "VarDefSkeleton", "LitExprListNext", "]" ] ],
    [ "Tuple", [ "(", ")" ] ],
    [ "Tuple", [ "(", "Expr", "LitExprListNext", ")" ] ],
    [ "Tuple", [ "(", "VarDefSkeleton", "LitExprListNext", ")" ] ],
    [ "Object", [ "{", "}" ] ],
    [ "Object", [ "{", "Identifier", ":", "Expr", "ObjNext", "}" ] ],
    [ "Object", [ "{", "Identifier", ":", "VarDefSkeleton", "ObjNext", "}" ] ],
    [ "Object", [ "{", "VarDefSkeleton", "ObjNext", "}" ] ],
    [ "Object", [ "{", "VarDef", "ObjNext", "}" ] ],
    [ "Set", [ "{", "Expr", ",", "Expr", "SetNext", "}" ] ],
    [ "Set", [ "{", "Expr", ",", "VarDefSkeleton", "SetNext", "}" ] ],
    [ "Set", [ "{", "VarDefSkeleton", ",", "Expr", "SetNext", "}" ] ],
    [ "Set", [ "{", "VarDefSkeleton", ",", "VarDefSkeleton", "SetNext", "}" ] ],
    [ "SetNext", [ ",", "Expr", "SetNext" ] ],
    [ "SetNext", [ ",", "VarDefSkeleton", "SetNext" ] ],
    [ "SetNext", [] ],
    [ "ObjNext", [ ",", "Identifier", ":", "Expr", "ObjNext" ] ],
    [ "ObjNext", [ ",", "Identifier", ":", "VarDefSkeleton", "ObjNext" ] ],
    [ "ObjNext", [ ",", "VarDefSkeleton", "ObjNext" ] ],
    [ "ObjNext", [ ",", "VarDef", "ObjNext" ] ],
    [ "ObjNext", [] ],
    [ "LitExprListNext", [ ",", "Expr", "LitExprListNext" ] ],
    [ "LitExprListNext", [ ",", "VarDefSkeleton", "LitExprListNext" ] ],
    [ "LitExprListNext", [] ],
    [ "FunctionCall", [ "Expr", "Tuple" ] ],
    [ "Block", [ "{", "ExprList", "}" ] ],
    [ "ExprList", [ "Expr" ] ],
    [ "ExprList", [ "Expr", ";" ] ],
    [ "ExprList", [ "Proposition" ] ],
    [ "ExprList", [ "DefExpr" ] ],
    [ "ExprList", [ "Expr", ";", "ExprList" ] ],
    [ "ExprList", [ "DefExpr", "ExprList" ] ],
    [ "ExprList", [ "Proposition", "ExprList" ] ],
    [ "BlockOrEmpty", [ "{", "}" ] ],
    [ "BlockOrEmpty", [ "Block" ] ],
    [ "Switch", [ "switch", "MExpr", "{", "Cases", "}" ] ],
    [ "MExpr", [ "Expr" ] ],
    [ "MExpr", [] ],
    [ "Cases", [ "Case", "Cases" ] ],
    [ "Cases", [ "Case" ] ],
    [ "Case", [ "case", ":", "Expr", ";" ] ],
    [ "Case", [ "case", ":", "DefExpr" ] ],
    [ "For", [ "for", "BlockOrEmpty" ] ],
    [ "For", [ "for", "Expr", ";", "BlockOrEmpty" ] ],
    [ "For", [ "for", "Expr", ";", "Expr", ";", "BlockOrEmpty" ] ],
    [ "For", [ "for", "Expr", ";", "Expr", ";", "Expr", ";", "BlockOrEmpty" ] ],
    [ "Proposition", [ "@All", ":", "Stm" ] ],
    [ "Proposition", [ "@All", "Relation", ":", "Stm" ] ],
    [ "Proposition", [ "@All", "StmDef", ":", "Stm" ] ],
    [ "Proposition", [ "@Exists", "Relation", ":", "Stm" ] ],
    [ "Proposition", [ "@Exists", "StmDef", ":", "Stm" ] ],
    [ "Proposition", [ "@Ex", "Relation", ":", "Stm" ] ],
    [ "Proposition", [ "@Ex", "StmDef", ":", "Stm" ] ],
    [ "Stm", [ "Proposition" ] ],
    [ "Stm", [ "Relation" ] ],
    [ "Stm", [ "Stm", "<-", "Stm" ] ],
    [ "Stm", [ "Stm", "->", "Stm" ] ],
    [ "Stm", [ "Stm", "<->", "Stm" ] ],
    [ "Relation", [ "hmm" ] ], // TODO
    [ "StmDef", [ "hmm" ] ], // TODO
    
    
    
    
    [ "Plaintext", [ "string" ] ],
    [ "JSON", [] ], // TODO
    [ "ChalkDoc", [] ], // TODO
  ];

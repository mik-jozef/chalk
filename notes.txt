```
JS      https://developer.mozilla.org/bm/docs/Web/JavaScript
Zig     https://github.com/zig-lang/zig
Python  https://www.python.org/
C++     https://cppreference.com
D       https://dlang.org/
Rust    https://www.rust-lang.org
Go      https://golang.org/
```

TODO
Optional.isNull();
error on `?~Type`
Object.shrink() - shrinks all members, eg. unused memory in dynamic arrays
compiler - make it error to compare value with null, because it is always false
import "x" using allocator?
[]String x(reservedSpace);
String,Buffer,Array:Viewable|Viewer; Viewer.view();
assert array length >= 0
arrays with arbitrary length
enum with just one variable generates a warning
enforce class contents order: enum values, variables, methods, nested classes
block returns last statement, function must return explicitly
import() function that dynamically loads code, not part of global namespace
do not have different types of arrays - I'm looking at std::vector
Function pointer is simply a pointer to Function class, no special treatment from compiler
no out-of-class function definitions
it is an error if class members and class member initialization order is different
functions are hoisted
promises
generate warning if unsafe code is safe
program is safe if every `unsafe` code is provably safe
string implements Buffer
main returns noreturn
array.size, not array length
class Defer - runs functions when destructed
json support
html library for gui, chalk to webasm
forEach - two overloads: one accepts a function that returns void, one that returns
  Bool, stops when true or false (which?) is returned.
division accepts maybe numbers and returns maybe number, can return a number if
  denominator is provably not null
warn on TODO comments
continue is not allowed in type switch
optimizations - range for should be compiled to iterator, foreach in tree should be converted from
  recursive to loop and inlined
warning or error if multiple declarations in the same expression?
Add compiler warning "useless trait type". Plenty of Java devs will do `Set x = HashSet()`
Ptr, UniquePtr, SharedPtr, (MarkSweepPtr?)
functions must explicitly return, other blocks of code return the last expression
class Class - used in reflection, const and not copyable
online repl that can also handle directory uploads of whole projects
repl requires three newlines to eval
`return { code block; }` is error?
let library authors release codemods - eg. to rename an identifier, ...
just one type for functions
should all fields be modifiable in constructor and assign function?
request fast persistent memory - useful on pcs that have just a few GB of SSD
trailing comma allowed if closing parenthesis/bracket/whatever is on next line
Error class, destructor throws if ignore() wasn't called
prefer start - end to start - length, because some types are orderable even if the
difference is not measurable
warning: function can be static
compile option: --all-generic
optimize out object creation in argument instead of having emplace?
warn on `x && Int32 x(0)` (ERRCODE: Variable declaration in implicit scope);
small standard library, official packages in userland
ability to inspect (and/or redirect) stdout?


```
Array.dimensionOf(nonArrayType) = 0
Array.dimensionOf(ArrayType<ValueType>) = comptime 1 + Array.dimensionOf(ValueType);
```

out formats - elf, web, (appimage, exe, other programming languages?)

chalk run main.cpp # runs interpreter
chalk run .
chalk eval "noreturn main() { /* ... */ }"
chalk eval "2 + 3"
chalk repl
chalk translate file.js out.elf --noStyleFormat
chalk install regerex npm/react-router
chalk publish . patch/minor/major
chalk debug out.elf
chalk fix file.chalk # first formats code? and interactively offers automatic fixes to errors
chalk help
chalk help ERRCODE # prints detailed help for error ERRCODE


// For custom smart pointer implementations?
trait Pointer {}

trait Object {
  static equals<T>(*?T a, *?T b) {
    if (IntSize.from(a) == IntSize.from(b)) return true;
    
    return T.equals(a, b);
  }
  
  static equals<Self>() { return false }
}

class T {}        - definition
class T           - generic declaration
class T : Trait   - generic declaration
class T a         - polymorphic type
class T a : T1 T2 - polymorphic type

function(class T x : Trait) {}

array constructor takes function that takes array and index as argument, constructs object there
compiler/interpreter is part of standard library
  Function f = compiler.compile(["Int8 param"], "return param + 1;"); // cannot access local vars
  f()

trait Number {
  static N add<N : Number>(*N a, *N b) {
    N.add(a, b);
  }

  static ?N add<N : Number>(*?N a, *?N b) {
    return ?a && ?b ? Number.add(a, b) : null;
  }
}



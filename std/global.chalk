/**
 * This module is imported by default into every module.
**/

import { Number } from "std/types.chalk";
import { Int, Int8, Int16, Int32, Int64 } from "std/int.chalk";

import { isNull } from "std/compiler-magic.chalk";

export trait Object {
  get class Class;
  
  get static String name;
  
  *Self assign(*Self value);
  
  String toString() {
    Reflect.classOf(Self);
    
    return [ Class.name, " {\n" ].join;
  }
  
  get String name;
  
  final ?*Object getField(*String name) {
    // Magic.
  }
  
  final static []Field getFields(FieldType type = FieldType.all) {
    // Magic.
  }
  
  own Bool equals<T>(?T a, ?T b, Int derefs) { // Note third parameter, TODO
    Pointer.equals(a, b) && return true;
    
    (isNull(a) || isNull(b)) && return false;
    
    return T.equals(a, b);
  }
  
  own Bool equals<T>(T a, T b) {
    return Pointer.equals(a, b) ? true : T.equals(a, b);
  }
  
  own Bool isNull() = isNull;
  
  own type commonType<T1, T2>() // ???
  own class commonType(class T1, class T2) // ???
  
  own isTemporary(*Object o);
}

export trait Optional<T : Nullable> {
  T value(T.null);
  
  pub Bool hasValue() { return value == T.null }
  pub ~*T getValue() {
    value == T.null
          ? error("Optional type does not have a value.") : return value;
  }
  pub ~*~T getValue() ~ { return *Optional.from(this).getValue(); }
  
}

export trait Optional<T> {}

export class String {
  find, todo
  
  getBytes();
  
  
}

export enum Bool = { true, false }

export *R cast(type R, *R val) {
  return *val;
}

String format(String format, Object ...args)

trait Object {
  pub class Class;
  
  Field getField(String name);
  
  Bool same(T a, T b, Int derefs = 0) { true if a and b have the same address in memory after each being dereferenced derefs times }
}

trait ErrCode {}

// Or trait?
export class Err {
  TODOType stackTrace;
  
  new(ErrCode code, String message) {
    stackTrace = System.getStackTrace() // Or something
  }
}

// Runs functions when destructed
export class Defer {
  []*Function<void, []> functions();
  
  void add(*Function<void, []> fn) {
    functions.push(fn);
  }
  
  ~Defer() {
    
  }
}

trait Number {
  Self from(Int64 i);
  
  Self add(*Self number);
  Self sub(*Self number);
  Self mul(*Self number);
  Self div(*Self number);
  Self mod(*Self number);
  Self pow(*Self number); // Problem: exponentiation in FiniteField<n> takes FiniteField<n-1> as a parameter, not Self
  
  own Self add(Self a, *Self b) {
    return a.add(b);
  }
  
  own Self sub(Self a, *Self b) {
    return a.sub(b);
  }
  
  own Self mul(Self a, *Self b) {
    return a.mul(b);
  }
  
  own Self div(Self a, *Self b) {
    return a.div(b);
  }
  
  own Self mod(Self a, *Self b) {
    return a.mod(b);
  }
  
  own Self pow(Self a, *Self b) {
    return a.pow(b);
  }
  
  from(String);
  toString();
}

class Float32 : Nullable, Number {
  static Float32 null;
  static Float32 Inf;
}

class Float64 : Number {
  static Float32 null;
  static Float32 Inf;
}

export class Int64 : Number, Stream {
  forEach(void()) {}
}

export class Int32 : Number {
  
}

export class Int16 : Number {
  
}

export class Int8 : Number {
  
}

export class Int = Int64;

class Compiler {
  run(File file) {}
  run(String s) {}
  translate(File file, Eval.format.cpp, Function<void, [ VirtualFile ]> fn) {}
  translate(String source, Eval.format.elf) {}
  translate(String source, Eval.format.function) {}
}

class Buffer : Viewable {
  
}

class Class {}

trait Enum {
  String name;
  Int index;
  
  static Self values;
}

trait Collection<T> : Iterable<T> {
  get Int size;
  
  Self<T> from(*Collection<T> source);
  Self<T> from(*Iterable<Collection<T>> source);
  
  Bool hasValue(*const T t);
  
  Stream<*T> find(*const T t);
  *T first(*const T t) { return find(t).getValue(); }
}

class Functions {
  get<Ret, Object...>()
}

class Math {}

// TODO: array will probably need formal semantics
export class Array<T> : Viewable {
  Int size;
  *T arrStart;
  *T memAllocStart;
  
  new(Int reservedSpace);
  new(Int _size, Int reservedSpace = size, void initializer(*T elem, Int index));
  Bool unshift(Int index = 0);
  indexOf
  has
}

export class Tuple<type... types> : ArrayTrait<T> {
  
}

*T move<T>(T t) { return t; }
export class Union<[]class> {
  pub Bool hasValue<X>() {}
  pub ~*X getValue<X>() {}
  pub ~*~X getValue<X>() ~ {}
}

class Array<T> : Indexable<T>, Iterable<T> {
  new(Int reserved = 0) {}
  new(Int length, void initializer(*T elem, Int index)) {}
  new(Stream<T> source) {}
  
  Bool shrink() {}
  
  Iterator<T> reverseIter() {}
  Array<T> reverse() {}
}

class Date {}
class RegeT {}

trait Map {}
class HashMap {}
class TreeMap {}

// TODO what about `Map<T,Null>`?
trait Set<T> : Iterable<T> {
  Bool has(*Set<T> a);
  
  *Set add(*T a);
  *Set remove(*T a);
  
  *Set<T> add(*Set<T> a) {
    a.forEach(e => add(e));
  }
  
  *Set<T> remove(*Set<T> a) {
    a.forEach(e => remove(e));
  }
  
  // Returns the set of all subsets of this.
  Set<T> subsets() {}
  
  own Set union(Set a, *Set b) {
    return a.remove(e=>!b.has(e));
  }
  
  own Set intersection(Set a, *Set b) {
    return a.add(b);
  }
  
  own Set symmetricDifference(Set a, Set b) {
    return Set.difference(Set.union(a, b), Set.intersection(a, b));
  }
  
  own Set difference(Set a, *Set b) {
    return a.remove(b);
  }
}
class HashSet {}
class TreeSet {}

class Tuple {}

trait Pointer<T> {
  own Int addressOf(*Object o) {}
  own *T pointerTo<T>(Int address) {}
}

class Reflect {
  class createClass([]trait traits, []Field fields) comptime {
    [[magic]];
  }
  
  trait createTrait() comptime {
  
  }
  
  R(...Args) createFunction() {}
  
  // Should Field rather be Field<T>? should nonstatic inner classes be just type variables instead of Java-like inner classes?
  Field createField(Field.Modifiers modifiers, const String name, class Type, Type value) {}
}

class Field friend Reflect {}

class ThreadPool {
  Thread add(Thread t) {}
  ThreadPool add(ThreadPool t) {}
}

class Ptr<T> : Pointer<T> {}
class WeakPtr<T> : Pointer<T> {}
class Box<T> : Pointer<T> {} // unique_ptr
class RefBox<T> : Pointer<T> {} // shared_ptr (maybe RcBox, or other?)

class Json {}

// TODO should this be a trait?
class Buffer {}

trait Function {
  class ReturnType;
  
  []Param Params;
  
  ?Ast body;
  
  own apply(fn, type|Object... args)
}

class Function<class R, []class params> {
  SharedPtr<Buffer> code;
  ?SharedPtr<StackFrame<?>> closure; // ???
  *StackFrame<code>; // ???
  
  static Function<R, params.subArray(args.length)> bind(Function<R, []class params> fn, params... args) {
    [[ compiler magic ]];
  }
}

trait ModuleT {}
class Module {}

trait Stream<T> {
  T next();
  
  void forEach(Bool fn(*T elem));
  Self map<Val>(T fn(*T elem), Self newObject);
  Self filter(Bool fn(*Self elem));
  T reduce<T>(T fn(*T elem, *T acc), *T start);
  
  []T take(Int n);
  []T takeAll();
  
  own Stream<Tuple<A, B>> zip(*Stream<A> a, *Stream<B> b);
  own Stream<T> zipWith<T>(*Stream<A> a, *Stream<B> b, T(*A a, *B b));
  static Self<Tuple<A, B>> zip(*Self<A> a, *Self<B> b);
  static Self<T> zipWith<T>(*Self<A> a, *Self<B> b, T(*A a, *B b));
  
  own Stream<T> flatten(Iterable<Stream<T>);
  
  Stream<T> find(Bool predicate(*const T)) {
    for T n = next() { predicate(n) && yield n; }
  }
  
  T first(Bool predicate(*const T)) {
    return find(predicate).next();
  }
}

trait AsyncStream<T> {
  *Self forEach(Promise<Bool> fn(*T elem));
  Bool all(Promise<Bool> fn(*T elem));
  Bool any(Promise<Bool> fn(*T elem));
  []Out map<Val>(Promise<T> fn(*T elem), Self newObject);
  []T filter(Promise<Bool> fn(*Self elem));
  Out reduce<Out>(Promise<Out> fn(*T elem, *Out acc), *Out start);
}

class InStream : Iterator<Buffer> {
  Promise<Buffer> read(Int bytes) {}
}

class Promise<T> {
  static Promise<[]T> all(T, Stream<Promise<T>>);
  static (Promise<T>, Stream<Promise<T>>) first(T, Stream<Promise<T>>);
}

class OutStream {
  Promise write(*Buffer b) {}
}

/**
 * Streams in and out must have the same target process. Should this class even exist?
 */
class IOStream {
  pub InStream in;
  pub OutStream out;
}

trait Hashable {
  Int hash();
}

trait Iterable<T> : AsyncIterable<AsyncIterator<T>>, Stream<T> {
  class Iterator;
  
  Iterator iter();
  AsyncIterator<T> asyncIter() {
    for i : iter() { yield i };
  }
}

trait AsyncIterable<I: AsyncIterator> {
  I asyncIter();
}

// Should this class be split for UTF-8 strings and strings with finite alphabet?
class String<Alphabet alphabet = Utf8> : Viewable, Buffer {}

class BigInt : Number {}
class StringBuilder {}
class Clipboard {
  get ?Clipboard systemClipboard;
}

class ChalkDoc {}

trait Iterator<T> : Iterable<T>, Stream<T> {
  ?*T find(*T elem);
  *T next();
  *T prev();
  Bool hasValue();
  *T getValue();
  
  *Iterator iter() { return this; }
}

Promise<Module> import(*String path);

Iterator range(Int to) {
  return range(0, to, sgn(to));
}

Iterator range(Int from, Int to, Int step = to - from > 0 ? 1 : -1) {}

Iterator range(Float to, Float step = to > 0 ? 1 : -1) {
  return range(0, to, step);
}

Iterator range(Float from, Float to, Float step = to - from > 0 ? 1 : -1) {}

class EventEmitter<[]String events> {}

class LinkedList<T> {
  class Node<T> {
    ~T value;
    
    ~?*~Node<T> prev;
    ~?*~Node<T> neTt;
    
    new(*~T val) : value(val) {}
  }
  
  ~?Node<T> first;
  ~?*Node<T> last;
  ~*Node<T> current;
  
  pushBack();
  pushFront();
  popBack();
  popFront();
}

// TODO should this take two Comparables instead of ints?
trait Slicable {
  Self slice(Int from, Int to);
}

trait Viewable : Slicable {
  Self view(Int from, Int to);
}

class ComplexFloat : Number {
  pub Float re;
  pub Float im;
}

trait Random {
  Bool randBool(Double chanceOfTrue);
}

class SimpleRandom : Random {}

SimpleRandom rand;

trait SQLDriver {}

// TODO zip, (a)png, json, something-like-markdown

class

trait FileTrait {}
class VirtualFile {}
class File {}

trait FolderTrait {}
class Folder {}
class VirtualFolder {}

class System {
  IOStream io; // This or Console.io
  
  String arch; // "unknown" | "x64" | "web" | ...;
}

// TODO separate logging to console (meant for user interaction only)
// and logging, ie. storing some data. The second should be safe against
// log injection.
class Logger {
  IOStream io; // This or System.io
  
  Void log(comptime const String s) {
    if (!Reflect.isComptime(s)) throw Error("Logging a runtime message");
  }
  
  Void logln(comptime const String s) { log(s + "\n") }
}

trait Comparator {
  static *Self clamp(const Self min, const Self value, const Self max) {
    min > max && throw(Error.new( // Or just `Error(`?
        "Minimum value must be less than the maximum value."));
    
    return switch {
      case value < min: min;
      case value > max: max;
      case _: value;
    }
  }
  
  static min(Iterable<const Self> a);
  static max(Stream<const Self> a);
  
  static compare(const Self a, const Self b) {}
}

trait Comparable {
  static class Comparator;
  
  
}

enum Noreturn {}

enum Null {
  null;
  
  Bool equals() { return false }
}

enum None {}























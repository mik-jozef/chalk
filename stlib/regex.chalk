///
TODO

Field("str", Class)
Field("str", [ Text("aaa") ])

should error handling be part of RegeRex?
///

/// Common type of parts of regex.
export trait Expr {}

export class Space : Expr {
  /// TODO space must have lookahead if equal to "" and to error on eg. importNamefroma
}

export class MSpace : Expr {
  new(String space, Int indent, []Expr indented) {}
}

export class Text : Expr {
  String str;
  
  new(const String _str) {}
}

export class Repeat : Expr {
  pub const []const Expr expr, delimiter;
  
  pub const Int min;
  pub const ?Int max;
  
  new(const []const Expr _expr,
      const []const Expr _delimiter = Expr.empty,
      Int _min = 0,
      ?Int _max = null) {}
}

export class Maybe : Expr {
  pub const []const Expr expr;
  
  new([]const Expr _expr) {}
}

// Rename to Or, add And
export class OneOf : Expr {
  pub const []const Expr alternatives;
  
  new([]const Expr _alternatives) {}
  
  new(const String str) : new(str.map(char => Chars(char))) {}
}

export class Ahead : Expr {
  pub const []const Expr cond;
  pub const []const Expr ifTrue;
  pub const []const Expr ifFalse;
  
  new(const Expr _cond,
      const Expr _ifTrue, const Expr _ifFalse) {}
}

export class Behind : Expr {
  pub const Expr cond;
  pub const Expr ifTrue;
  pub const Expr ifFalse;
  
  pub new(const Expr _cond,
      const Expr _ifTrue, const Expr _ifFalse) {}
}

export class Property : Expr {
  pub const String name;
  
  pub const []Int dimensions;
  
  pub const Expr expr;
  
  pub new(const String _name, const []Int _dimensions, const Expr _expr) {}
}

export class BackRef : Expr {}

export class Equals : Expr {}

class

export trait Regex<Self : Regex> : Iterable<String> {
  static const Expr regex;
  
  static const String name;
  
  Self match(*const String str) {
    
  }
  
  Stream<Self> find(*const String str) {
    
  }
  
  export class Expr {
    pub static const Expr newline = Expr.string("\n");
    pub static const Expr letter; // TODO include diacritics, possibly other alphabets, too
    pub static const Expr asciiLetter = Expr.oneOf("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
    pub static const Expr digit = Expr.oneOf("0123456789");
    pub static const Expr alphanumeric = Expr.oneOf([ letter, digit ]);
    
    pub static Expr whitespace(Bool newline = true, Int min = 1, ?Int max = null) const {}
    
    pub static const Expr lineStart;
    pub static const Expr lineEnd;
    pub static const Expr stringStart;
    pub static const Expr stringEnd;
    
    pub static const Expr noMatch;
    
    []Matchable expr;
    
    new() {}
    new(Regex r) {}
    new([]Expr Exprs) {}
    
    
    pub static Expr string(const String s) const {}
    pub static Expr maybe(const Expr e) const {}
    pub static Expr oneOf([]const String chars) const {}
    pub static Expr oneOf([]const Expr alternatives, const Expr except) const {}
    pub static Expr repeat(const Expr e, const Expr delimiter = Expr(),
        Int min = 0, ?Int max = null) const {}
    pub static Expr lookAhead(const Expr e, const Expr ifTrue, const Expr ifFalse) const {}
    pub static Expr lookBehind(const Expr e, const Expr ifTrue, const Expr ifFalse) const {}
    pub static Expr capture(const String name, const Expr e, Bool shallow = false) const {}
    pub static Expr backRef(const String name, []Int dimensions) {}
    pub static Expr equals(const String s, []Int dimensions = [], const Expr e) {}
  }
}

class Example : Regex {
  static const RegexExpr regex = new();
}